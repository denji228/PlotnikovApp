settings.py
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = 'ваш-secret-key-здесь'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'PlotnikovApp', 
    'crispy_forms',
    'crispy_bootstrap5',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Plotnikov_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Plotnikov_project.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_L10N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

AUTH_USER_MODEL = 'PlotnikovApp.User'
LOGIN_REDIRECT_URL = 'profile'
LOGOUT_REDIRECT_URL = 'home'

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"  
CRISPY_TEMPLATE_PACK = "bootstrap5"           

urls.py
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('PlotnikovApp.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

wsgi.py
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Plotnikov_project.settings')
application = get_wsgi_application()

admin.py
from django.contrib import admin
from .models import User, ConsultationRequest

admin.site.register(User)
admin.site.register(ConsultationRequest)

apps.py
from django.apps import AppConfig

class PlotnikovappConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'PlotnikovApp'

forms.py
from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import User, ConsultationRequest

class UserRegisterForm(UserCreationForm):
    email = forms.EmailField(required=True)
    first_name = forms.CharField(required=True)
    last_name = forms.CharField(required=True)
    phone = forms.CharField(required=True)
    
    class Meta:
        model = User
        fields = ['username', 'first_name', 'last_name', 'email', 'phone', 'password1', 'password2']

class ConsultationRequestForm(forms.ModelForm):
    class Meta:
        model = ConsultationRequest
        fields = ['problem', 'category', 'date_time', 'contact_phone', 'method']
        widgets = {
            'date_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
        }

models.py
from django.db import models
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    phone = models.CharField(max_length=20)
    address = models.CharField(max_length=255, blank=True)
    
    def __str__(self):
        return self.get_full_name()

class ConsultationRequest(models.Model):
    STATUS_CHOICES = [
        ('new', 'Новая'),
        ('processing', 'В обработке'),
        ('waiting', 'Ожидает подтверждения'),
        ('canceled', 'Отменена'),
        ('solved', 'Решена'),
    ]
    
    CATEGORY_CHOICES = [
        ('software', 'Программное обеспечение'),
        ('hardware', 'Настройка оборудования'),
        ('security', 'Кибербезопасность'),
        ('network', 'Сетевая инфраструктура'),
        ('servers', 'Серверные системы'),
    ]
    
    METHOD_CHOICES = [
        ('online', 'Онлайн'),
        ('offline', 'Офлайн'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    problem = models.TextField()
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)
    date_time = models.DateTimeField()
    contact_phone = models.CharField(max_length=20)
    method = models.CharField(max_length=10, choices=METHOD_CHOICES)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='new')
    cancel_reason = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"Заявка #{self.id} от {self.user}"

urls.py
from django.urls import path
from . import views
from django.contrib.auth import views as auth_views

urlpatterns = [
    path('', views.home, name='home'),
    path('register/', views.register, name='register'),
    path('login/', auth_views.LoginView.as_view(template_name='PlotnikovApp/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('profile/', views.profile, name='profile'),
    path('admin-panel/', views.admin_panel, name='admin_panel'),
    path('admin-panel/update/<int:pk>/', views.update_status, name='update_status'),
]

views.py
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.admin.views.decorators import staff_member_required
from .forms import UserRegisterForm, ConsultationRequestForm
from .models import ConsultationRequest

def home(request):
    slider_images = [
        'img/slider/slide1.jpg',
        'img/slider/slide2.jpg',
        'img/slider/slide3.jpg',
     
    ]
    return render(request, 'PlotnikovApp/home.html', {
        'slider_images': slider_images
    })

def register(request):
    if request.method == 'POST':
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            return redirect('login')
    else:
        form = UserRegisterForm()
    return render(request, 'PlotnikovApp/register.html', {'form': form})

@login_required
def profile(request):
    if request.method == 'POST':
        form = ConsultationRequestForm(request.POST)
        if form.is_valid():
            consultation = form.save(commit=False)
            consultation.user = request.user
            consultation.save()
            return redirect('profile')
    else:
        form = ConsultationRequestForm()
    
    consultations = ConsultationRequest.objects.filter(user=request.user)
    return render(request, 'PlotnikovApp/profile.html', {
        'form': form,
        'consultations': consultations
    })

@staff_member_required
def admin_panel(request):
    consultations = ConsultationRequest.objects.all()
    return render(request, 'PlotnikovApp/admin_panel.html', {
        'consultations': consultations
    })

@staff_member_required
def update_status(request, pk):
    consultation = ConsultationRequest.objects.get(pk=pk)
    if request.method == 'POST':
        new_status = request.POST.get('status')
        consultation.status = new_status
        if new_status == 'canceled':
            consultation.cancel_reason = request.POST.get('cancel_reason', '')
        consultation.save()
        return redirect('admin_panel')
    return render(request, 'PlotnikovApp/update_status.html', {
        'consultation': consultation
    })

style.css
/* Стили для слайдера */
.carousel {
    max-height: 500px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.carousel img {
    object-fit: cover;
    width: 100%;
    height: 500px;
}

admin_panel.html
{% extends 'PlotnikovApp/base.html' %}

{% block content %}
<div class="container-fluid">
    <h2>Административная панель</h2>
    
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Пользователь</th>
                    <th>Проблема</th>
                    <th>Категория</th>
                    <th>Дата/время</th>
                    <th>Способ</th>
                    <th>Статус</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                {% for consultation in consultations %}
                <tr>
                    <td>{{ consultation.id }}</td>
                    <td>{{ consultation.user.get_full_name }}</td>
                    <td>{{ consultation.problem|truncatechars:30 }}</td>
                    <td>{{ consultation.get_category_display }}</td>
                    <td>{{ consultation.date_time|date:"d.m.Y H:i" }}</td>
                    <td>{{ consultation.get_method_display }}</td>
                    <td>
                        <span class="badge bg-{% if consultation.status == 'new' %}primary{% elif consultation.status == 'solved' %}success{% elif consultation.status == 'canceled' %}danger{% else %}warning{% endif %}">
                            {{ consultation.get_status_display }}
                        </span>
                    </td>
                    <td>
                        <a href="{% url 'update_status' consultation.id %}" class="btn btn-sm btn-outline-primary">
                            Изменить статус
                        </a>
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}

base.html
<!DOCTYPE html>
<html>
<head>
    <title>Plotnikov App</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <a class="navbar-brand" href="{% url 'home' %}">Plotnikov App</a>
            <div class="navbar-nav">
                {% if user.is_authenticated %}
                    <a class="nav-link" href="{% url 'profile' %}">Профиль</a>
                    {% if user.is_staff %}
                        <a class="nav-link" href="{% url 'admin_panel' %}">Админ-панель</a>
                    {% endif %}
                    <a class="nav-link" href="{% url 'logout' %}">Выход</a>
                {% else %}
                    <a class="nav-link" href="{% url 'login' %}">Вход</a>
                    <a class="nav-link" href="{% url 'register' %}">Регистрация</a>
                {% endif %}
            </div>
        </div>
    </nav>
    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

home.html
{% extends 'PlotnikovApp/base.html' %}
{% load static %}

{% block content %}
<div class="container mt-4">
    <!-- Слайдер -->
    <div id="mainSlider" class="carousel slide mb-5" data-bs-ride="carousel">
        <div class="carousel-indicators">
            {% for image in slider_images %}
            <button type="button" data-bs-target="#mainSlider" 
                    data-bs-slide-to="{{ forloop.counter0 }}" 
                    {% if forloop.first %}class="active"{% endif %}></button>
            {% endfor %}
        </div>
        
        <div class="carousel-inner">
            {% for image in slider_images %}
            <div class="carousel-item {% if forloop.first %}active{% endif %}">
                <img src="{% static image %}" class="d-block w-100" alt="Slide {{ forloop.counter }}">
            </div>
            {% endfor %}
        </div>
        
        <button class="carousel-control-prev" type="button" data-bs-target="#mainSlider" data-bs-slide="prev">
            <span class="carousel-control-prev-icon"></span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#mainSlider" data-bs-slide="next">
            <span class="carousel-control-next-icon"></span>
        </button>
    </div>

    <!-- Остальное содержимое -->
    <div class="text-center">
        <h1>Добро пожаловать в Plotnikov App</h1>
        <p class="lead">Ваш идеальный IT-помощник</p>
    </div>
</div>
{% endblock %}

login.html
{% extends 'PlotnikovApp/base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="row">
    <div class="col-md-6 mx-auto">
        <div class="card">
            <div class="card-header">
                <h4>Вход в систему</h4>
            </div>
            <div class="card-body">
                {% if form.errors %}
                <div class="alert alert-danger">
                    Неверное имя пользователя или пароль.
                </div>
                {% endif %}
                
                <form method="post">
                    {% csrf_token %}
                    {{ form|crispy }}
                    <button type="submit" class="btn btn-primary mt-3">Войти</button>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

profile.html
{% extends 'PlotnikovApp/base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="row">
    <div class="col-md-8 mx-auto">
        <h2>Личный кабинет</h2>
        <h3 class="mt-4">Новая заявка</h3>
        
        <div class="card mb-4">
            <div class="card-body">
                <form method="post">
                    {% csrf_token %}
                    {{ form|crispy }}
                    <button type="submit" class="btn btn-primary">Создать заявку</button>
                </form>
            </div>
        </div>
        
        <h3>Мои заявки</h3>
        <div class="list-group">
            {% for consultation in consultations %}
            <div class="list-group-item">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">{{ consultation.get_category_display }}</h5>
                    <span class="badge bg-{% if consultation.status == 'new' %}primary{% elif consultation.status == 'solved' %}success{% elif consultation.status == 'canceled' %}danger{% else %}warning{% endif %}">
                        {{ consultation.get_status_display }}
                    </span>
                </div>
                <p class="mb-1">{{ consultation.problem }}</p>
                <small>Дата: {{ consultation.date_time|date:"d.m.Y H:i" }}</small>
                <small class="d-block">Способ: {{ consultation.get_method_display }}</small>
                {% if consultation.cancel_reason %}
                <div class="alert alert-danger mt-2">
                    <strong>Причина отмены:</strong> {{ consultation.cancel_reason }}
                </div>
                {% endif %}
            </div>
            {% empty %}
            <div class="list-group-item">
                У вас пока нет заявок
            </div>
            {% endfor %}
        </div>
    </div>
</div>
{% endblock %}

register.html
{% extends 'PlotnikovApp/base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="row">
    <div class="col-md-6 mx-auto">
        <div class="card">
            <div class="card-header">
                <h4>Регистрация</h4>
            </div>
            <div class="card-body">
                <form method="post">
                    {% csrf_token %}
                    {{ form|crispy }}
                    <button type="submit" class="btn btn-primary mt-3">Зарегистрироваться</button>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

update_status.html
{% extends 'PlotnikovApp/base.html' %}

{% block content %}
<div class="row">
    <div class="col-md-6 mx-auto">
        <div class="card">
            <div class="card-header">
                <h4>Изменение статуса заявки #{{ consultation.id }}</h4>
            </div>
            <div class="card-body">
                <form method="post">
                    {% csrf_token %}
                    
                    <div class="mb-3">
                        <label class="form-label">Текущий статус</label>
                        <input type="text" class="form-control" value="{{ consultation.get_status_display }}" readonly>
                    </div>
                    
                    <div class="mb-3">
                        <label for="status" class="form-label">Новый статус</label>
                        <select class="form-select" id="status" name="status" required>
                            {% if consultation.status == 'new' %}
                                <option value="processing">В обработке</option>
                                <option value="waiting">Ожидает подтверждения</option>
                                <option value="canceled">Отменена</option>
                                <option value="solved">Решена</option>
                            {% elif consultation.status == 'processing' %}
                                <option value="solved">Решена</option>
                                <option value="canceled">Отменена</option>
                            {% elif consultation.status == 'waiting' %}
                                <option value="processing">В обработке</option>
                                <option value="canceled">Отменена</option>
                                <option value="solved">Решена</option>
                            {% endif %}
                        </select>
                    </div>
                    
                    <div class="mb-3" id="cancel-reason-container" style="display: none;">
                        <label for="cancel_reason" class="form-label">Причина отмены</label>
                        <textarea class="form-control" id="cancel_reason" name="cancel_reason" rows="3"></textarea>
                    </div>
                    
                    <button type="submit" class="btn btn-primary">Сохранить</button>
                    <a href="{% url 'admin_panel' %}" class="btn btn-outline-secondary">Отмена</a>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
document.getElementById('status').addEventListener('change', function() {
    const cancelReasonContainer = document.getElementById('cancel-reason-container');
    if (this.value === 'canceled') {
        cancelReasonContainer.style.display = 'block';
    } else {
        cancelReasonContainer.style.display = 'none';
    }
});
</script>
{% endblock %}

manage.py
#!/usr/bin/env python
import os
import sys

def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Plotnikov_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)

if __name__ == '__main__':
    main()


